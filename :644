clASs Tradings::AveragePriceService
  def initialize(current_user)
    @current_user = current_user
  end

  def call
    average_price = ActiveRecord::Base.connection.execute(query_avg_price)
    position = ActiveRecord::Base.connection.execute(query_position)
    map_to_average_price(average_price)
  end

  private

  def query_avg_price
    query = <<-SQL
      WITH trading AS (
        SELECT SUM(total_value) AS "total_value", SUM(quantity) AS "quantity", RTRIM(code, 'F') AS "code"
        FROM tradings
        WHERE user_id = #{@current_user.id}
        AND kind ilike '%compra%'
        GROUP BY quantity, RTRIM(code, 'F')
      ),
      posicao AS (
        SELECT RTRIM(code, 'F') AS "code", SUM(CASE WHEN kind ILIKE '%compra%' THEN quantity ELSE -quantity END) AS "quantity"
        FROM tradings
        GROUP BY quantity, RTRIM(code, 'F')
      )
      SELECT trading.code AS "product", (SUM(trading.total_value) / SUM(trading.quantity)) AS "average_price", SUM(trading.quantity) AS quantity
      FROM trading
      WHERE trading.code IN (
        SELECT posicao.code
        FROM posicao
        GROUP BY posicao.code
        HAVING SUM(posicao.quantity) > 0
      )
      GROUP BY trading.code
      ORDER BY trading.code ASC;
    SQL
  end

  def query_position
    query = <<-SQL
      WITH posicao AS (
        SELECT rtrim(code, 'F') AS "code", SUM(CASE WHEN kind ILIKE '%compra%' THEN quantity ELSE -quantity END) AS "quantity"
        FROM tradings
        GROUP BY quantity, RTRIM(code, 'F')
      )
      SELECT posicao.code, SUM(posicao.quantity)
      FROM posicao
      GROUP BY posicao.code
      HAVING SUM(posicao.quantity) > 0
      ORDER BY posicao.code ASC;
    SQL
  end

  def map_to_average_price(result)
    products = []
    result.to_a.each do |row|
      products << AveragePrice.new(row["product"], row["average_price"], row["quantity"])
    end

    products
  end
end
